#!/bin/bash

# Wrapper script for XMM ESAS spectral extraction
# for obsids 0087940201 and 0551000201
# Run on statler/cooper (8GB RAM), pn-spectra fails with only 4GB RAM on treble
#
# Augments ESAS scripts to extract complete FWC spectra (vs. just individual
# chips), move spectrum files to avoid clobbering in subsequent runs, and
# keyword and group spectra.
#
# Presupposes that mos-filter and pn-filter have already been run successfully
# to generate *-clean.fits


# ---------------------------------------------
# Argument parsing and configuration parameters
# ---------------------------------------------

if [[ "$#" -ne 2 ]]; then
    echo "ERROR: two arguments (obsid, region label) required"
    exit 1
fi

## TODO take required options using named parameters

OBSID=$1
RSTEM=$2  # region label (src, bkg, etc)
if [[ "$OBSID" != "$SAS_OBSID" ]]; then
  echo "ERROR: obsid $OBSID does not match SASINIT value ($SAS_OBSID)"
  exit 1
fi
# Note: use $OBSID over $SAS_OBSID throughout script

RDIR="${XMM_PATH}/regs/${OBSID}"
CALDB="${XMM_PATH}/caldb"

# Exposure/instrument identifiers (mos1S001, mos2S002, pnS003)
# are currently hardcoded.  Could refactor, but hard to justify for n=3.

# ------------------------
# ESAS spectrum extraction
# ------------------------

cd "${XMM_PATH}/${OBSID}/odf/repro"

##### TODO elow and ehigh set energy band for IMAGE -- why 0.3-1.25 keV?
##### images currently not used.  may have to rerun if used later.
mask="1"
elow="300"
ehigh="1250"

##### WARNING: spectrum extraction commands taken from 0087940201
##### need to write appropriate conditionals for different obsids etc.

if [[ "$OBSID" == "0087940201" ]]; then

  exps=("mos1S001" "mos2S002" "pnS003")
  exps_n=("1S001" "2S002" "S003")
  ccd_strs=("ccd1=1 ccd2=1 ccd3=1 ccd4=1 ccd5=1 ccd6=1 ccd7=1" \
            "ccd1=1 ccd2=1 ccd3=1 ccd4=1 ccd5=1 ccd6=1 ccd7=1" \
            "quad1=1 quad2=1 quad3=1 quad4=1")

elif [[ "$OBSID" == "0551000201" ]]; then

  exps=("mos1S001" "mos2S002" "pnS003")
  exps_n=("1S001" "2S002" "S003")
  # 0551000201 MOS1 CCD6 = 0 (destroyed), MOS2 CCD5 = 0 (anomalous state)
  ccd_strs=("ccd1=1 ccd2=1 ccd3=1 ccd4=1 ccd5=1 ccd6=0 ccd7=1" \
            "ccd1=1 ccd2=1 ccd3=1 ccd4=1 ccd5=0 ccd6=1 ccd7=1" \
            "quad1=1 quad2=1 quad3=1 quad4=1")
else
  echo "ERROR: unsupported obsid $OBSID (data reduction pipeline not set up)"
  exit 1
fi


echo "Extracting spectra and QPB for $OBSID, region ${RSTEM}"

for ((i=0;i<${#exps[@]};++i)); do

  exp="${exps[$i]}"     # mos1S001
  exp_n="${exps_n[$i]}" # 1S001
  ccd_str="${ccd_strs[$i]}" # "ccd1=1 ccd2=1 ... ccd7=1"
  # Do not quote ${ccd_str} in command invocations!

  f_region="${RDIR}/reg_${exp}_${RSTEM}.txt"

  if [[ $exp =~ "mos" ]]; then
    exe_spec="mos-spectra-mod"
    exe_qpb="mos_back"
  elif [[ $exp =~ "pn" ]]; then
    exe_spec="pn-spectra-mod"
    exe_qpb="pn_back"
  else
    echo "ERROR: Got bad exposure string $exp"
    exit 1
  fi


  echo "  Running ${exe_spec} prefix=${exp_n}..."
  ${exe_spec} prefix=${exp_n} region="${f_region}" caldb="${CALDB}" \
      mask=${mask} elow=${elow} ehigh=${ehigh} ${ccd_str} \
    >& "${exe_spec}_${exp}_${RSTEM}.log"
  mv command.csh "${exe_spec}_${exp}_${RSTEM}_cmd.csh"

  if [[ "$exp" =~ "pn" ]] && [[ "$OBSID" == "0551000201" ]]; then
    echo "  Skipping ${exe_qpb} for $OBSID $exp (no observation corner data)"
  else
    echo "  Running ${exe_qpb} prefix=${exp_n}..."
    ${exe_qpb} prefix=${exp_n} caldb="${CALDB}" diag=2 clobber=1 \
        elow=${elow} ehigh=${ehigh} ${ccd_str} \
      >& "${exe_qpb}_${exp}_${RSTEM}.log"
    # diag=2 creates more diagnostic output files (.qdp plots)
  fi

  echo "  Renaming output spectra (map ${exp} to ${exp}-${RSTEM})"
  # Currently, just spectra + soft proton image for proton-scale
  mv "${exp}-obj.pi"  "${exp}-${RSTEM}.pi"
  mv "${exp}-back.pi" "${exp}-${RSTEM}-qpb.pi"
  mv "${exp}.rmf"     "${exp}-${RSTEM}.rmf"
  mv "${exp}.arf"     "${exp}-${RSTEM}.arf"
  mv "${exp}-obj-im-sp-det.fits" "${exp}-${RSTEM}-im-sp.fits"
  if [[ "$exp" =~ "pn" ]]; then
    mv "${exp}-obj-oot.pi" "${exp}-${RSTEM}-oot.pi"
    mv "${exp}-obj-os.pi"  "${exp}-${RSTEM}-os.pi"
  fi

  # Outputs from "-mod" versions of ESAS scripts:
  # FWC object spectra for line norm extraction
  # and detmapped RMF for pnS003-obj.pi (not for FWC data!
  mv "${exp}-obj-ff.pi" "${exp}-${RSTEM}-ff.pi"
  mv "${exp}-ff.rmf"    "${exp}-${RSTEM}-ff.rmf"
  mv "${exp}-ff.arf"    "${exp}-${RSTEM}-ff.arf"
  if [[ "$exp" =~ "pn" ]]; then
    mv "${exp}-obj-ff-oot.pi" "${exp}-${RSTEM}-ff-oot.pi"
    mv "${exp}-dmap.rmf"      "${exp}-${RSTEM}-dmap.rmf"
  fi

  echo "  Bin output spectra and assign {BACK,RESP,ANCR}FILE keywords"

  # Set keywords for FWC object spectra
  # NOTE that we are not using OOT-subtracted spectra for PN
  grppha infile="${exp}-${RSTEM}-ff.pi" outfile="!${exp}-${RSTEM}-ff-key.pi" \
    comm="chkey BACKFILE NONE & \
          chkey RESPFILE ${exp}-${RSTEM}-ff.rmf & \
          chkey ANCRFILE ${exp}-${RSTEM}-ff.arf & \
          exit"

  if [[ "$exp" =~ "pn" ]] && [[ "$OBSID" == "0551000201" ]]; then
    echo "  Skipping grppha for $OBSID $exp (no observation corner data)"
  else

    # Bin OOT-subtracted spectrum for PN only
    os=""
    if [[ "$exp" =~ "pn" ]]; then
      os="-os"
    fi

    grppha infile="${exp}-${RSTEM}.pi" outfile="!${exp}-${RSTEM}${os}-grp50.pi" \
        comm="chkey BACKFILE ${exp}-${RSTEM}-qpb.pi & \
              chkey RESPFILE ${exp}-${RSTEM}.rmf & \
              chkey ANCRFILE ${exp}-${RSTEM}.arf & \
              group min 50 & exit" \
        chatter=10 \
      >& "grppha_${exp}-${RSTEM}${os}.log"
  fi

done



echo "Finished extracting all spectra for ${OBSID} region ${RSTEM}!"
echo ""
