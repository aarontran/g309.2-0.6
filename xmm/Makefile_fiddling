
# Run from a top level directory, this will create:
#   ./$(OBSID)/
#   ./$(OBSID)/odf/
#   ./$(OBSID)/odf/repro/
#   ./$(OBSID)/pps/

# Observation-specific variables
OBSID = 0087940201
REV = 0315
#OBSID = 0551000201
#REV = 1692

# Processing chain directories (stick to absolute directories)
# please note that if data are moved, some paths may break
# unless you re-run make and re-generate the paths.
ODF = $(shell pwd)/$(OBSID)/odf
REPRO = $(ODF)/repro
CCF = $(REPRO)/ccf.cif
SOSF = $(REPRO)/$(REV)_$(OBSID)_SCX00000SUM.SAS
INIT = $(CCF) $(SOSF)


CALDB = /data/mpofls/atran/research/xmm/caldb

SHELL = /bin/tcsh    # TODO I don't like the tcsh dependency but oh well...
SASINIT = source /data/mpofls/atran/research/xmm/sasinit
SASPATH = setenv SAS_ODF $(SOSF) ; \
	  setenv SAS_CCF $(CCF) ;
SAS_ODF = $(SOSF)

#.PHONY : all
#all : $(REPRO)/%_$(OBSID)_SCX00000SUM.SAS

#.PHONY : fiddle
#fiddle :
#	echo $(REPRO)
#	ls $(REPRO)

.PHONY : clean
clean :
	rm -f $(OBSID)/odf/$(OBSID).tar.gz
	rm -f $(OBSID)/odf/$(OBSID).TAR
# Don't remove files_$(OBSID).tar as it takes a while to download

# ----------------
# Data preparation
# ----------------

# TODO: rename region files to fit the wildcard convention

# TODO these are being run from the wrong directory...
# TODO these should probably go in a separate makefile
# that requires SAS environment variable export, before the makefile is called

# Unfortunately, the exposure(?) identifiers (M1S001, M2S002, PNS003) are not
# known a priori.  We must either hardcode them as if by magic (on the
# assumption that someone has pre-inspected the data),
# or find a clean way to pass them through via wildcards

# Problems:
# - we don't know % (1S001, 2S002, S003) a priori
#   but we are able to infer them from a dependency (event lists)
# - these are unwieldy.  These are mostly generate once and forget
#   but I do not want to omit files from the dependency graph...


# Pause 2015 November 13, Friday
# this is getting out of hand -- spent one entire day trying to slog through
# Makefile mechanics, and it seems to me that this tool is not well suited for
# my problem... and/or I just don't know how to use it well.

# Compute QPB for source region
# TODO This depends on a slew of files from mos-spectra
# which I have not specified in the dependencies here!!
# using -obj-src.pi spectrum as "evidence" of successful script build
mos%-back-src.pi : mos%-obj-src.pi
	mos_back prefix=% caldb=$(CALDB) \
		diag=2 elow=0 ehigh=0 \
		ccd1=1 ccd2=1 ccd3=1 ccd4=1 ccd5=1 ccd6=1 ccd7=1 \
	    >& mos_back_%_src.log

pn%-back-src.pi pn%-obj-os-src.pi : pn%-obj-src.pi
	pn_back prefix=% caldb=$(CALDB) \
		diag=2 elow=0 ehigh=0 quad1=1 quad2=1 quad3=1 quad4=1 \
	    >& pn_back_%_src.log

# Spectrum extraction, source region

mos%-obj-src.pi mos%-src.rmf mos%-src.arf : mos%-clean.fits reg_mos%_src.txt
	mos-spectra prefix=$* caldb=$(CALDB) region=regm1src.txt \
		mask=0 elow=0 ehigh=0 \
		ccd1=1 ccd2=1 ccd3=1 ccd4=1 ccd5=1 ccd6=1 ccd7=1 \
	    >& mos-spectra_$*_src.log
	mv command.csh mos_spectra_regm1src_cmd.csh

pn%-obj-src.pi pn%-src.rmf pn%-src.arf : pn%-clean.fits reg_pn%_src.txt
	pn-spectra prefix=$* caldb=$(CALDB) region=regpnsrc.txt \
	    	mask=0 elow=0 ehigh=0 \
	    	quad1=1 quad2=1 quad3=1 quad4=1 \
	    >& pn-spectra_$*_src.log
	mv command.csh pn_spectra_regpnsrc_cmd.csh

# Good time filtering (remove flares w/ histogram method)
# some obsids may need additional filtering.

# A shitton more files are produced by mos-filter and pn-filter
# and many of them are important to subsequent steps
# I could manually specify them all (can I use % wildcard in lists?)
# but for the sake of simplicity I will ignore them...

mos%-clean.fits : P$(OBSID)M%MIEVLI0000.FIT
	mos-filter >& mos-filter.log
	mv command.csh mos_filter_cmd.csh
	# Work around Snowden's renaming so dependencies resolve correctly
	mv mos$*-ori.fits $<
	ln -s $< mos$*-ori.fits

pn%-clean.fits : P$(OBSID)PN%OOEVLI0000.FIT
	pn-filter >& pn-filter.log
	# no command.csh is generated by pn-filter, unlike mos-filter.
	# Work around Snowden's renaming so dependencies resolve correctly
	mv pn$*-ori.fits $<
	ln -s $< pn$*-ori.fits

# Generate "level 1" or "level 2" event lists.

# Event lists:
#   P{0087940201}M1{S001}MIEVLI0000.FIT
#   P{0087940201}M2{S002}MIEVLI0000.FIT
P$(OBSID)M%MIEVLI0000.FIT : $(INIT)
	emchain >& emchain.log

# P0551000201PNS003PIEVLI0000.FIT -- imaging mode (TIEVLI for fast modes)
# No a priori way to know mode, so this is definitely not generalizable
P$(OBSID)PN%PIEVLI0000.FIT : $(INIT) P$(OBSID)PN%OOEVLI0000.FIT
	epchain >& epchain.log

# P0551000201PNS003OOEVLI0000.FIT -- OOT events
P$(OBSID)PN%OOEVLI0000.FIT : $(INIT)
	epchain withoutoftime=true >& epchain_oot.log


# ------------------------------------------------------------
# Initial data preparation (download and setup CIF, SAS files)
# ------------------------------------------------------------

# Assumes tcsh environment (setenv usage)

.PHONY : init
init : $(shell pwd)/$(REV)_$(OBSID)_SCX00000SUM.SAS

# http://xmm.esac.esa.int/external/xmm_user_support/documentation/sas_usg/USG/odfingest.html
$(SOSF) : $(CCF)
	$(SASINIT) ; \
	    setenv SAS_ODF $(ODF) ; \
	    setenv SAS_CCF $< ; \
	    odfingest outdir=$(REPRO) ;

$(CCF) : files_$(OBSID).tar
	tar -xf $<
	tar -xzf $(OBSID)/odf/$(OBSID).tar.gz --directory=$(ODF)
	tar -xf $(OBSID)/odf/*_$(OBSID).TAR --directory=$(ODF)
	mkdir -p $(REPRO)
	$(SASINIT) ; \
	    setenv SAS_ODF $(ODF) ; \
	    cifbuild calindexset=$@ ;

# Get all files for obsid from XMM-Newton Science Archive
files_$(OBSID).tar :
	curl -o $@ "http://nxsa.esac.esa.int/nxsa-sl/servlet/data-action-aio?obsno=$(OBSID)"

